<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-07T14:46:02.007Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpackcss import 使用 alias 相对路径</title>
    <link href="http://example.com/wiki/Webpack/"/>
    <id>http://example.com/wiki/Webpack/</id>
    <published>2025-06-07T14:39:29.000Z</published>
    <updated>2025-06-07T14:46:02.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在用 Webpack 处理打包时，可将某一目录配置一个别名，代码中就能使用与别名的相对路径引用资源。</p><p>在 Vue 项目中，我们通常使用 <code>vue-webpack</code> 脚手架生成工程模板，然后配置 <code>@</code> 为项目根目录下放资源和源码的 <code>/src</code> 目录的别名；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line">resolve: &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="built_in">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以在 js 文件中用形如 <code>import tool from &#39;@/utils/xxx&#39; </code>的方式引用 <code>/src/utils/xxx.js </code>文件，并且 Webpack 能正确识别并打包。</p><p>但是在 css 文件，如 less, sass, stylus 中，使用 <code>@import &quot;@/style/theme&quot; </code>的语法引用相对 <code>@ </code>的目录确会报错，”找不到 ‘@’ 目录”，说明 webpack 没有正确识别资源相对路径。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>原因是 css 文件会被用<code> css-loader</code> 处理，这里 css <code>@import </code>后的字符串会被 <code>css-loader</code> 视为绝对路径解析，因为我们并没有添加 <code>css-loader</code> 的 <a href="">alias</a>，所以会报找不到 <code>@</code> 目录。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在 Webpack 中 css import 使用 alias 相对路径的解决办法有两种；</p><p>一是直接为 <code>css-loader</code> 添加 <a href="">ailas</a> 的路径，但是在 <code>vue-webpack </code>给的模板中，单独针对这个插件添加配置就显得麻烦冗余了；</p><p>二是在引用路径的字符串最前面添加上 ~ 符号，如 <code>@import &quot;~@/style/theme&quot;</code>；Webpack 会将以 ~ 符号作为前缀的路径视作依赖模块而去解析，这样 <code>@</code> 的 alias 配置就能生效了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>~ </code>视为模块解析是 webpack 做的事，不是 css-loader 做的事。</p><p>各类非 js 直接引用（<code>import require</code>）静态资源，依赖相对路径加载问题，都可以用 ~ 语法完美解决；</p><p>例如 css module 中：<code> @import &quot;~@/style/theme&quot;</code></p><p>css 属性中： <code>background: url(&quot;~@/assets/xxx.jpg&quot;)</code></p><p>html 标签中： <code>&lt;img src=&quot;~@/assets/xxx.jpg&quot; alt=&quot;alias&quot;&gt;</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">vue-webpack 资源路径的处理</a></li><li><a href="https://github.com/webpack-contrib/css-loader/issues/49">Using url(path) with resolve.alias</a></li><li><a href="https://github.com/webpack-contrib/css-loader#url">CSS Loader Usage Url</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;在用 Webpack 处理打包时，可将某一目录配置一个别名，代码中就能使用与别名的相对路径引用资源。&lt;/p&gt;
&lt;p&gt;在 Vue 项目中，我们</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css-loader" scheme="http://example.com/tags/css-loader/"/>
    
    <category term="webpack" scheme="http://example.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>gulp-imagemin使用与参数设置</title>
    <link href="http://example.com/wiki/gulp-imagemin/"/>
    <id>http://example.com/wiki/gulp-imagemin/</id>
    <published>2025-06-07T14:30:21.000Z</published>
    <updated>2025-06-07T14:38:44.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用版本"><a href="#使用版本" class="headerlink" title="使用版本"></a>使用版本</h1><ul><li>gulp : v3.9.1</li><li>gulp-imagemin : v3.1.1</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>gulp-imagemin 是配合 gulp 用作压缩图片文件的工具（包括PNG、JPEG、GIF和SVG图片）。</p><p>gulp-imagemin <strong>更新 v3.0.0 版本后，用法与之前版本有所区别</strong>。</p><p>最近我一开始使用的时候就在网上搜索，看到很多博客都讲得一样，于是随便复制了一段代码拿来用。但是实际测试发现，这段代码里设置的参数并没有起作用，比如不管怎样设置压缩质量，出来的结果都一样。于是开始调试，通过阅读源码和官方文档后，我发现目前<strong>国内网上关于</strong>gulp-imagemin <strong>的代码大部分都是错的</strong>，并且明显看得出是相互抄袭复制的。或者也不能说是错了——没有注明版本，原来的代码用在目前的版本（v3.1.1）上就是错的。</p><p>我摘抄了一则 gulp-imagemin 网上常见的<strong>错误代码</strong> 如下：（<strong>注意是对 v3.0.0 及以上版本的错误代码，对 v2.4.0 版本可能正确。</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//只适用于gulp-imagemin 2.4.0 或以下版本</span><br><span class="line">var gulp = require(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    imagemin = require(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">&#x27;testImagemin&#x27;</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;src/img/*.&#123;png,jpg,gif,ico&#125;&#x27;</span>)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">            progressive: <span class="literal">true</span>, //类型：Boolean 默认：<span class="literal">false</span> 无损压缩jpg图片</span><br><span class="line">            interlaced: <span class="literal">true</span>, //类型：Boolean 默认：<span class="literal">false</span> 隔行扫描gif进行渲染</span><br><span class="line">            multipass: <span class="literal">true</span> //类型：Boolean 默认：<span class="literal">false</span> 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;dist/img&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上段代码出处<a href="">gulp教程之gulp-imagemin | 一点</a></p><p>且不说 <code>progressive: true </code>的意思应该是“转为渐进式图片”，这段代码在 gulp-imagemin v3.0.0 之后就不正确了，主要体现在 <code>imagemin(option)</code> 的参数设置。</p><p>目前网上没有找到几个 3.0.0 之后版本的示例代码，于是我自己去查看官方 API 说明，这里摘抄一段如下：<br>sindresorhus committed on 12 Aug 2016</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>Comes bundled with the following lossless optimizers:</p><p>gifsicle — Compress GIF images<br>jpegtran — Compress JPEG images<br>optipng — Compress PNG images<br>svgo — Compress SVG images<br>These are bundled for convenience and most will not need anything else.</p><h1 id="imagemin-plugins-options"><a href="#imagemin-plugins-options" class="headerlink" title="imagemin([plugins], [options])"></a>imagemin([plugins], [options])</h1><p>Unsupported files are ignored.</p><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><p>Type: <code>Array</code><br>Default: <code>[imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()]</code></p><p>Plugins to use. This will overwrite the default plugins. Note that the default plugins comes with good defaults and should be sufficient in most cases. See the individual plugins for supported options.</p><h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><p>Type: <code>Object</code></p><h2 id="verbose"><a href="#verbose" class="headerlink" title="verbose"></a>verbose</h2><p>Type: <code>boolean</code><br>Default: <code>false</code></p><p>Output more detailed information.</p><p>可以看到 <code>options</code> 项只有一个项 <code>verbose</code>，用于输出详细信息，而不是像上面那段代码的 <code>optimizationLevel interlaced </code>等项。</p><p>在四个默认插件的 API 文档中又能进一步找到参数说明。</p><p>根据官方 API 文档，我这里给出我的示例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// gulp-imagemin v3.0.0 及以上版本</span><br><span class="line">const gulp = require(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line">const imagemin = require(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line">gulp.task(<span class="string">&#x27;minify-imgs&#x27;</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&#x27;./public/images/**/*.&#123;png,jpg,gif,svg&#125;&#x27;</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">                imagemin.gifsicle(&#123;interlaced: <span class="literal">true</span>&#125;), </span><br><span class="line">                imagemin.jpegtran(&#123;progressive: <span class="literal">true</span>&#125;), </span><br><span class="line">                imagemin.optipng(), </span><br><span class="line">                imagemin.svgo()</span><br><span class="line">            ], &#123;verbose: <span class="literal">false</span>&#125;</span><br><span class="line">        ))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码仍使用四个默认 imagemin 插件，设置将 gif 转为交错式，将 jpeg 转为渐进式，png 与 svg 使用默认设置，不输出详细信息。</p><p><strong>所以用某一个工具或者模块之前，应该先自己阅读一遍官方文档。</strong> 我所了解的现在人们一般学习过程是，先看博客里的入门教程，然后直接写代码，学过了入门级往深一点走，才知道遇到问题会去查官方文档。我想说，官方文档有时候确实难啃，但是如果一开始我们就看了官方文档，后面会不会少走点弯路呢？</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">gulp教程之gulp-imagemin</a></li><li><a href="">gulp-imagemin图片压缩—-gulp系列</a></li><li><a href="https://www.npmjs.com/package/gulp-imagemin">gulp-imagemin | npmjs</a></li><li><a href="https://github.com/sindresorhus/gulp-imagemin">sindresorhus&#x2F;gulp-imagemin | GitHub</a></li><li><a href="https://github.com/imagemin/imagemin-jpegtran">imagemin&#x2F;imagemin-jpegtran | GitHub</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用版本&quot;&gt;&lt;a href=&quot;#使用版本&quot; class=&quot;headerlink&quot; title=&quot;使用版本&quot;&gt;&lt;/a&gt;使用版本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;gulp : v3.9.1&lt;/li&gt;
&lt;li&gt;gulp-imagemin : v3.1.1&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Nodejs" scheme="http://example.com/tags/Nodejs/"/>
    
    <category term="gulp" scheme="http://example.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Selenium中使用 Chrome 路径问题</title>
    <link href="http://example.com/wiki/Selenium/"/>
    <id>http://example.com/wiki/Selenium/</id>
    <published>2025-06-07T14:23:34.000Z</published>
    <updated>2025-06-07T14:29:20.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>这个问题的起因是折腾了好久，vue2 官方模板 <code>vue init webpack</code> 初始化后，<code>npm install</code> 完，直接 <code>npm run e2e </code>都报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error retrieving a new session from the selenium server</span><br><span class="line"></span><br><span class="line">Connection refused! Is selenium server started?</span><br></pre></td></tr></table></figure><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><p><code>nightwatch.conf.js </code>中，对服务器和浏览器的地址描述，用的分别是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_path: require(<span class="string">&#x27;selenium-server&#x27;</span>).path</span><br><span class="line"><span class="string">&#x27;webdriver.chrome.driver&#x27;</span>: require(<span class="string">&#x27;chromedriver&#x27;</span>).path</span><br></pre></td></tr></table></figure><p>在 <code>node</code> 中检查地址没问题，包也没问题。</p><p>查找官网资料未果，后在各网友经验中发现两句关键描述：</p><p><strong>在 selenium 中使用 chromedriver 驱动，除了需要下载 chromedriver.exe 然后放置在 chrome 浏览器的安装目录之外，还要将 chrome 安装目录添加到环境变量 path 中。</strong></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>1.从 <code>node_modules</code> 的 <code>chormedriver</code> 包中复制出 <code>chromedriver.exe</code> 到 Chrome 安装目录下（<code>G</code>oogle&#x2F;Chrome&#x2F;Application&#x2F;<code>），和 </code>chromed.exe<code> 放在同一目录中。 2.将 Chrome 安装目录（</code>Google&#x2F;Chrome&#x2F;Application&#x2F;<code>）添加到环境变量 </code>path<code>下。 3.把</code>nightwatch.conf.js<code>中的</code>webdriver.chrome.driver<code>对应的路径手动指定到 Chrome 安装目录下的</code>chromedriver.exe，Win<code>下记得字符转义。 此时</code>npm run e2e&#96; 能成功启动 Chrome 并测试。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/carsonzhang_/article/details/46318531">selenium chromedriver配置</a></li><li><a href="https://www.cnblogs.com/Jeff-cui/p/4940410.html">使用webdriver打开本地浏览器</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;这个问题的起因是折腾了好久，vue2 官方模板 &lt;code&gt;vue init webpack&lt;/code&gt; 初始化后，&lt;code&gt;npm i</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>awk管道操作小结</title>
    <link href="http://example.com/wiki/awk/"/>
    <id>http://example.com/wiki/awk/</id>
    <published>2025-06-07T13:29:34.000Z</published>
    <updated>2025-06-07T13:45:57.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。</p><p>先看文件结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">plus.sh  data.txt</span><br></pre></td></tr></table></figure><p>其中， <code>plus.sh</code> 文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">IFS=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">read</span> a b</span><br><span class="line">((c=a+b)) </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;c&#125;</span></span><br></pre></td></tr></table></figure><p>代码含义是从标准输入读入两个数， <code>a </code>、<code>b</code>，返回 <code>a+b</code> 的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./plus.sh</span><br><span class="line">2 3    <span class="comment"># &lt;-- its my input</span></span><br><span class="line">5      <span class="comment"># --&gt; its result</span></span><br></pre></td></tr></table></figure><p><code>data.txt</code> 中的数据如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 30</span><br><span class="line"></span><br><span class="line">30 40</span><br><span class="line"></span><br><span class="line">40 80</span><br><span class="line"></span><br><span class="line">80 100</span><br></pre></td></tr></table></figure><p>目标是使用 awk 从 <code>data.txt</code> 中读入 4 组数据，分别输入到 <code>plus.sh</code> 中，返回 4 个结果值，并依次输入到 <code>output.txt</code> 中。预期结果 <code>output.txt</code> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">30</span><br><span class="line">70</span><br><span class="line">120</span><br><span class="line">180</span><br></pre></td></tr></table></figure><h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>一开始，简单的思路是，awk 使用<strong>空行分割文本文件</strong>，把每组文本块<strong>通过管道输入</strong>到调用的 <code>plus.sh </code>中，再把每组的结果通过重定向追加到 <code>output.txt</code> 文件中。<br>根据思路于是写出如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;print | &quot;./plus.sh &gt;&gt; output.txt&quot;&#125;&#x27;</span> data.txt</span><br></pre></td></tr></table></figure><p>然而一看结果，只有第一个分段中求出来的值；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">plus.sh  data.txt  output.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> output.txt</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>经过调试和单独输出，发现分段也没问题，单独 <code>print </code>也是分段的没问题，于是大概猜测<strong>问题出在重定向上</strong>，除了第一个值以外的其他结果并没有被重定向到文件（此处只是当时猜测，其实不对，请看下文分析）；</p><p>通过查阅 <strong>「awk 使用管道输出到 shell 中」</strong> 的相关资料，找到问题答案：</p><p>如果在 awk 程序中打开了管道，必须<strong>先关闭该管道才能打开另一个管道</strong>。也就是说一次只能打开一个管道。</p><p><strong>shell 命令必须被双引号引用起来</strong>。</p><p>如果打算<strong>再次</strong>在 awk 程序中使用某个文件或管道进行读写，则可能要先关闭程序，因为其中的管道会保持打开状态直至脚本运行结束。注意，管道一旦被打开，就会保持打开状态直至 awk 退出。</p><p>对于 <code>awk output | shell input</code> 来说，shell 接收 awk 的输出，并进行处理。需要注意的是，<strong>awk 的 output 是先缓存在 pipe 中，等输出完毕后再调用 shell 命令 处理</strong>，shell 命令只处理一次，而且<strong>处理的时机是 「awk程序结束时，或者管道关闭时（需要显式的关闭管道）」</strong></p><p>对于刚才的问题，简单的解释就是因为管道缓存，<code>print</code>的所有输出被堆到一起只传了一次给 <code>plus.sh</code>，而且这一次相当于传了整个文件，但 <code>plus.sh</code> 在读了两个数计算完后就退出了，后面的所有数都没用上，由于 <code>plus.sh</code> 只计算了一次，因此结果也只有一个。（并非上面猜测的结果未被重定向）</p><h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><p>最初的解决尝试是使用 awk 中的 <code>close</code> 命令关闭文件管道，于是写出如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;print | &quot;./plus.sh &gt;&gt; output.txt&quot;; close(&quot;output.txt&quot;)&#125;&#x27;</span> data.txt</span><br></pre></td></tr></table></figure><p>结果依然只有一个值……</p><p>继续查阅资料才知道，<code>close </code>关闭时需要输入的是<strong>管道描述符</strong>，而非只是文件名，而管道描述符是包含<strong>对管道调用的整个命令在内的 shell 命令字符串</strong>，也就是说，应该是 <code>close(&quot;./plus.sh &gt;&gt; output.txt&quot;)</code> 。</p><p>再次尝试代码修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;print | &quot;./plus.sh &gt;&gt; output.txt&quot;; close(&quot;./plus.sh &gt;&gt; output.txt&quot;)&#125;&#x27;</span> data.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> output.txt</span><br><span class="line">30</span><br><span class="line">70</span><br><span class="line">120</span><br><span class="line">180</span><br></pre></td></tr></table></figure><p>OK，解决问题，这句代码就是能用的了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结下刚刚踩的坑，再做些优化；</p><p>1.awk 中先关闭该管道才能打开另一个管道；</p><p>2.<code>awk output | shell input </code>时，awk 输出缓存到管道中，只有 awk 程序结束时，或者管道关闭时，才把缓存中的所有输出交由 shell 处理；</p><p>3.管道描述符是调用管道的整个 shell 命令字符串；（如在<code>print | &quot;./plus.sh &gt;&gt; output.txt&quot;;</code>中就是 <code>&quot;./plus.sh &gt;&gt; output.txt&quot;</code>）</p><p>4.awk 语句中使用 shell 变量<br>1.<code>&quot;&#39;$var&#39;&quot;</code> 的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=<span class="string">&quot;test&quot;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;&#x27;</span><span class="variable">$var</span><span class="string">&#x27;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>2.变量中有空格时使用 “‘“$var”‘“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=<span class="string">&quot;this is a test&quot;</span> </span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;&#x27;</span><span class="string">&quot;<span class="variable">$var</span>&quot;</span><span class="string">&#x27;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>3.变量中有空格，并且变量当作 shell 命令执行时，使用<code> &quot;\&quot;&#39;&quot;$&#123;var&#125;&quot;&#39;\&quot;&quot;</code> 形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&quot;./plus a and b.sh&quot;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print | &quot;\&quot;&#x27;</span><span class="string">&quot;<span class="variable">$&#123;cmd&#125;</span>&quot;</span><span class="string">&#x27;\&quot;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>再把上面 awk 语句写入到一个脚本中，方便调用：<br>input_test.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">cmd=<span class="string">&quot;<span class="variable">$&#123;1:-&quot;./main.sh&quot;&#125;</span>&quot;</span></span><br><span class="line">data=<span class="string">&quot;<span class="variable">$&#123;2:-&quot;test_data.txt&quot;&#125;</span>&quot;</span></span><br><span class="line">output=<span class="string">&quot;<span class="variable">$&#123;3:-&quot;stdout.txt&quot;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">awk -v RS=<span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;print $n | &quot;\&quot;&#x27;</span><span class="string">&quot;<span class="variable">$&#123;cmd&#125;</span>&quot;</span><span class="string">&#x27;\&quot; &gt;&gt; \&quot;&#x27;</span><span class="string">&quot;<span class="variable">$&#123;output&#125;</span>&quot;</span><span class="string">&#x27;\&quot;&quot;;close(&quot;\&quot;&#x27;</span><span class="string">&quot;<span class="variable">$&#123;cmd&#125;</span>&quot;</span><span class="string">&#x27;\&quot; &gt;&gt; \&quot;&#x27;</span><span class="string">&quot;<span class="variable">$&#123;output&#125;</span>&quot;</span><span class="string">&#x27;\&quot;&quot;)&#125;&#x27;</span> <span class="variable">$&#123;data&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们可以调用这个脚本，帮我们分割文本做输入输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input_test.sh [command] [data-file] [output-file]</span></span><br><span class="line"></span><br><span class="line">$ ./input_test.sh <span class="string">&quot;./plus.exe&quot;</span></span><br><span class="line"><span class="comment"># 接收三个参数，要测试的命令，数据文件，输出文件，都有默认值</span></span><br><span class="line"><span class="comment"># ==&gt; 将自动分割 test_data.txt 中的文本块分别对 plus.exe 做输入，并把结果依次写入 stdout.txt 中</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/dong008259/archive/2011/12/06/2277287.html">linux之awk用法 | 东方雨中漫步者</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。&lt;/p</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Linux" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/"/>
    
    <category term="Shell" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/Shell/"/>
    
    
    <category term="Shell" scheme="http://example.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04开机默认命令行界面</title>
    <link href="http://example.com/wiki/Ubuntu-16-04/"/>
    <id>http://example.com/wiki/Ubuntu-16-04/</id>
    <published>2025-06-07T13:24:35.000Z</published>
    <updated>2025-06-07T13:30:21.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关闭图形界面，默认命令行"><a href="#关闭图形界面，默认命令行" class="headerlink" title="关闭图形界面，默认命令行"></a>关闭图形界面，默认命令行</h1><p>1.不推介，不可恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> lightdm.service</span><br></pre></td></tr></table></figure><p>2.推介，安全，可恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure><p>只是修改默认交互目标，开机不会后台启动桌面。</p><h1 id="开启图形界面，默认图新界面"><a href="#开启图形界面，默认图新界面" class="headerlink" title="开启图形界面，默认图新界面"></a>开启图形界面，默认图新界面</h1><p>1.针对上述第一条，只能重装 lightdm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install --reinstall lightdm</span><br></pre></td></tr></table></figure><p>2.对应上述第二条，再切换回默认图形交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><p>3.临时开启<br>刚刚两条都是需要要配置后重启的，不过就算不切换默认，或者在重启之前，任何时候都可以临时开启图形界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start lightdm</span><br></pre></td></tr></table></figure><p>只限当次开机中，如果没有切换默认图形界面，下次开机任然会是命令行界面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关闭图形界面，默认命令行&quot;&gt;&lt;a href=&quot;#关闭图形界面，默认命令行&quot; class=&quot;headerlink&quot; title=&quot;关闭图形界面，默认命令行&quot;&gt;&lt;/a&gt;关闭图形界面，默认命令行&lt;/h1&gt;&lt;p&gt;1.不推介，不可恢复&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Linux" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/"/>
    
    <category term="Ubuntu" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Vim粘贴模式</title>
    <link href="http://example.com/wiki/Vimz/"/>
    <id>http://example.com/wiki/Vimz/</id>
    <published>2025-06-07T13:12:53.000Z</published>
    <updated>2025-06-07T13:23:13.399Z</updated>
    
    <content type="html"><![CDATA[<p>在开启自动缩进的 Vim 中使用<code>Shift + Insert</code>键粘贴带有缩进的代码时，Vim 会把粘贴的内容当作键盘输入来处理，使得每遇到一个换行符就会添加一次自动缩进，导致原本的代码每行被依次连续往后缩，导致代码变乱。</p><p>既然是缩进问题，首先尝试的是取消自动缩进功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; 关闭自动缩进和智能缩进</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">set</span> noai</span><br><span class="line"><span class="string">&quot; set nosi</span></span><br><span class="line"><span class="string">:set nosmartindent </span></span><br><span class="line"><span class="string">:set noautoindent</span></span><br></pre></td></tr></table></figure><p>关闭自动缩进后，有时能解决错行了，有时还是不行。</p><p>更推荐的做法是使用 Vim 的 Paste 模式，这个是 Vim 自带的，为了避免粘贴时出现一些格式错误而使用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; 开启粘贴模式</span></span><br><span class="line"><span class="string">:set paste</span></span><br><span class="line"><span class="string">&quot;</span> 取消粘贴模式</span><br><span class="line">:<span class="built_in">set</span> nopaste</span><br></pre></td></tr></table></figure><p>在粘贴模式下（Paste Mode），粘贴内容不会出现代码变形，通过部分了解，发现粘贴模式修改了好几项设置：</p><ul><li>textwidth 设置为 0</li><li>wrapmargin 设置为 0</li><li>softtabstop 设置为 0</li><li>关闭自动缩进（noautoindent nosmartindent）</li><li>重置 revins</li><li>重置 ruler</li><li>重置 showmatch</li><li>清空 formatoptions</li><li>禁用 lisp</li><li>禁用 indentexpr</li><li>禁用 cindent</li></ul><p>所以之前说的关闭自动缩进只是 Paste 模式下的一项，考虑不够全面，所以有时还是会格式错位。</p><p>并且 Paste 模式本身有一个切换选项 <code>pastetoggle</code>可以直接绑定快捷键来方便切换开启和取消粘贴模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> pastetoggle=&lt;F11&gt;</span><br></pre></td></tr></table></figure><p>这样只需要按 <code>F11</code> 就能开启和取消粘贴模式了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开启自动缩进的 Vim 中使用&lt;code&gt;Shift + Insert&lt;/code&gt;键粘贴带有缩进的代码时，Vim 会把粘贴的内容当作键盘输入来处理，使得每遇到一个换行符就会添加一次自动缩进，导致原本的代码每行被依次连续往后缩，导致代码变乱。&lt;/p&gt;
&lt;p&gt;既然是缩进问题</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Linux" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/"/>
    
    <category term="Vim" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/Vim/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="Vim" scheme="http://example.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令控制屏幕</title>
    <link href="http://example.com/wiki/Linuxming/"/>
    <id>http://example.com/wiki/Linuxming/</id>
    <published>2025-06-07T13:07:34.000Z</published>
    <updated>2025-06-07T13:11:57.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关闭屏幕"><a href="#关闭屏幕" class="headerlink" title="关闭屏幕"></a>关闭屏幕</h1><p>适合没有关闭屏幕快捷键的笔记本等设备。</p><ul><li>&#x2F;sys 文件方式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /sys/class/backlight/intel_backlight/brightness &lt;&lt;&lt; <span class="string">0</span></span><br></pre></td></tr></table></figure><p>亮度值根据情况选择，一般 0 即为关闭。</p><p>xset 命令方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xset dpms force off</span><br></pre></td></tr></table></figure><p>实际使用时可写成脚本，然后设置自定义快捷键来运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关闭屏幕&quot;&gt;&lt;a href=&quot;#关闭屏幕&quot; class=&quot;headerlink&quot; title=&quot;关闭屏幕&quot;&gt;&lt;/a&gt;关闭屏幕&lt;/h1&gt;&lt;p&gt;适合没有关闭屏幕快捷键的笔记本等设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x2F;sys 文件方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;f</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Linux" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IaaS, PaaS, SaaS 概念</title>
    <link href="http://example.com/wiki/jiagou/"/>
    <id>http://example.com/wiki/jiagou/</id>
    <published>2025-06-07T12:57:41.000Z</published>
    <updated>2025-06-07T13:01:17.500Z</updated>
    
    <content type="html"><![CDATA[<p>服务通常将其提供的服务自下而上分成三层：<strong>基础设施</strong>(infrastructure)、<strong>平台</strong>(platform)和<strong>软件</strong>(software)。</p><h1 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h1><p>Infrastructure-as-a-Service(<strong>基础设施即服务</strong>)</p><p>第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。</p><p>但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。</p><p>这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。</p><h1 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h1><p>Platform-as-a-Service（<strong>平台即服务</strong>）</p><p>第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。</p><p>云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。</p><p>换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。</p><h1 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h1><p>Software-as-a-Service（<strong>软件即服务</strong>）</p><p>简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。</p><p>不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">IaaS PaaS和SaaS公司的作用 | 盐漂浮草</a></li><li><a href="">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答</a></li><li><a href="">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务通常将其提供的服务自下而上分成三层：&lt;strong&gt;基础设施&lt;/strong&gt;(infrastructure)、&lt;strong&gt;平台&lt;/strong&gt;(platform)和&lt;strong&gt;软件&lt;/strong&gt;(software)。&lt;/p&gt;
&lt;h1 id=&quot;IaaS&quot;&gt;</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="架构" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="云服务" scheme="http://example.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法复杂度</title>
    <link href="http://example.com/wiki/suanfa/"/>
    <id>http://example.com/wiki/suanfa/</id>
    <published>2025-06-07T11:59:52.000Z</published>
    <updated>2025-06-07T12:06:45.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法时间空间复杂度表"><a href="#排序算法时间空间复杂度表" class="headerlink" title="排序算法时间空间复杂度表"></a>排序算法时间空间复杂度表</h1><table><thead><tr><th>排序方法</th><th>平均时间</th><th>最坏时间</th><th>辅助空间</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>简单选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>直接插入排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>希尔排序</td><td>$O(n \log n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>堆排序</td><td>$O(n \log n)$</td><td>$O(n \log n)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>并归排序</td><td>$O(n \log n)$</td><td>$O(n \log n)$</td><td>$O(n)$</td><td>稳定</td></tr><tr><td>快速排序</td><td>$O(n \log n)$</td><td>$O(n^2)$</td><td>$O(n \log n)$</td><td>不稳定</td></tr><tr><td>基数排序</td><td>$O(d(n + r))$</td><td>$O(d(n + r))$</td><td>$O(n)$</td><td>稳定</td></tr></tbody></table><p>注：基数排序中，d 为位数，r 为基数，n 为原数组个数。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li>大话数据结构 | 程杰</li><li><a href="">Sorting Algorithms Animations</a></li><li><a href="">冒泡排序 | Wikipedia</a></li><li><a href="">选择排序 | Wikipedia</a></li><li><a href="">快速排序 | Wikipedia</a></li><li><a href="">堆排序| Wikipedia</a></li><li><a href="">希尔排序 | Wikipedia</a></li><li><a href="">归并排序 | Wikipedia</a></li><li><a href="">维基百科上的算法和数据结构链接很强大 | 21aspnet</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序算法时间空间复杂度表&quot;&gt;&lt;a href=&quot;#排序算法时间空间复杂度表&quot; class=&quot;headerlink&quot; title=&quot;排序算法时间空间复杂度表&quot;&gt;&lt;/a&gt;排序算法时间空间复杂度表&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;排序方法&lt;/th</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="算法" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>语义化版本号 2.0.0</title>
    <link href="http://example.com/wiki/ruanjiangongcheng/"/>
    <id>http://example.com/wiki/ruanjiangongcheng/</id>
    <published>2025-06-07T11:51:16.000Z</published>
    <updated>2025-06-07T11:56:37.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><p>1.主版本号：当你做了不兼容的 API 修改，<br>2.次版本号：当你做了向下兼容的功能性新增，<br>3.修订号：当你做了向下兼容的问题修正。</p><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><p>考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p><p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://semver.org/">Semantic Versioning 2.0.0</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;/p&gt;
&lt;p&gt;1.主版本号：当你做了不兼容的 API 修改，&lt;br&gt;2.次版本号</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="软件工程" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="开发规范" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
    <category term="版本控制" scheme="http://example.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git 清理已追踪或未添加追踪的文件</title>
    <link href="http://example.com/wiki/Gitqingli/"/>
    <id>http://example.com/wiki/Gitqingli/</id>
    <published>2025-06-07T11:25:45.000Z</published>
    <updated>2025-06-07T11:43:45.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-清理已追踪或未添加追踪的文件"><a href="#Git-清理已追踪或未添加追踪的文件" class="headerlink" title="Git 清理已追踪或未添加追踪的文件"></a>Git 清理已追踪或未添加追踪的文件</h1><p><code>git add</code> 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要丢弃本次修改过并添加到暂存区的内容，或者需要删除未被追踪的文件。  </p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>git checkout</code> 是把文件从<strong>暂存区中恢复到工作区</strong>，也就是说源文件如果被修改，再使用 <code>git add</code> 添加到暂存区了，<code>git checkout</code> 无法把他再恢复到原文件，只能恢复到暂存时的状态。  </p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><code>git reset</code> 可以用来重置工作区和暂存区还能更改 <code>HEAD</code> 指向，可以达到我们的丢弃本次修改到暂存区的目的。  </p><h3 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]</span></span><br><span class="line"><span class="comment"># eg: git reset --mixed HEAD</span></span><br><span class="line">$ git reset HEAD  </span><br><span class="line">$ git checkout .  </span><br></pre></td></tr></table></figure><p>首先使用 <code>git reset HEAD </code>把暂存区重置到本次提交，再用 <code>checkout</code> 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 <code>checkout </code>恢复到的是本次提交时的初始状态了。</p><p><code>git reset</code> 有五种模式，不写明模式参数时，默认为 <code>--mixed</code>，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作）</p><table><thead><tr><th>模式</th><th>重置工作区</th><th>重置暂存区</th><th>将 HEAD 指向指定 commit</th></tr></thead><tbody><tr><td>-hard</td><td>√</td><td>√</td><td>√</td></tr><tr><td>-soft</td><td></td><td></td><td>√</td></tr><tr><td>-mixed</td><td></td><td>√</td><td>√</td></tr><tr><td>-merge</td><td></td><td>暂存区有文件则重置失败</td><td>√</td></tr><tr><td>-keep</td><td></td><td>暂存区有文件则重置失败</td><td>√</td></tr></tbody></table><p>所以刚才上面两行命令， <code>reset </code>后再 <code>checkou</code> ，可以用 <code>--hard </code>代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><p>顺便一提，<code>git reset --hard </code>是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 <code>git checkou</code> 是恢复，所以不会影响未添加追踪的新文件。</p><p><code>git clean</code> 就是用来删除未被添加追踪的文件和文件夹的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clean -n  <span class="comment"># 将显示哪些未被追踪的文件和文件夹可以清理</span></span><br><span class="line">git clean -d  <span class="comment"># 清理未被追踪的文件夹</span></span><br><span class="line">git clean -f  <span class="comment"># 清理未被追踪的文件</span></span><br><span class="line">git clean -<span class="built_in">df</span>  <span class="comment"># 清理未被追踪的文件和文件夹</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">git reset简介</a></li><li><a href="">Git 工作区、暂存区和版本库</a></li><li><a href="">git 删除已经 add 的文件</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-清理已追踪或未添加追踪的文件&quot;&gt;&lt;a href=&quot;#Git-清理已追踪或未添加追踪的文件&quot; class=&quot;headerlink&quot; title=&quot;Git 清理已追踪或未添加追踪的文件&quot;&gt;&lt;/a&gt;Git 清理已追踪或未添加追踪的文件&lt;/h1&gt;&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Git" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git commit message 基本规范</title>
    <link href="http://example.com/wiki/Git-jibenguifan/"/>
    <id>http://example.com/wiki/Git-jibenguifan/</id>
    <published>2025-06-07T11:16:08.000Z</published>
    <updated>2025-06-07T11:22:37.010Z</updated>
    
    <content type="html"><![CDATA[<p>使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。</p><p>在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。</p><p>一般遵守 <a href="">thoughtbot</a> 规范，这里有他们的详细说明 <a href="">Useful Tips For A Better Commit Message</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50-character subject line</span><br><span class="line"></span><br><span class="line">72-character wrapped longer description. This should answer:</span><br><span class="line"></span><br><span class="line">* Why was this change necessary?</span><br><span class="line">* How does it address the problem?</span><br><span class="line">* Are there any side effects?</span><br><span class="line"></span><br><span class="line">Include a <span class="built_in">link</span> to the ticket, <span class="keyword">if</span> any.</span><br></pre></td></tr></table></figure><p>简单的说就是：</p><p>1.第一行不超过 50 个字符<br>2.第二行空一行<br>3.第三行开始是描述信息，每行长度不超过 72 个字符，有序号，结尾无句号<br>4.第三行开始的描述信息主要说明：</p><ul><li>这个提交有什么改动？</li><li>如何解决的问题？</li><li>会对哪方面产生影响吗？</li></ul><p>5.描述信息完后空一行，close issue 或者给个相应 ticket 的链接<br>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fix(<span class="variable">$compile</span>): couple of unit tests <span class="keyword">for</span> IE9</span><br><span class="line"> </span><br><span class="line">1. Older IEs serialize html uppercased, but IE9 does not...</span><br><span class="line">2. Would be better to expect <span class="keyword">case</span> insensitive, unfortunately jasmine does</span><br><span class="line">3. not allow to user regexps <span class="keyword">for</span> throw expectations</span><br><span class="line"> </span><br><span class="line">Closes <span class="comment">#392</span></span><br><span class="line">Breaks foo.bar api, foo.baz should be used instead</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。&lt;/p&gt;
&lt;p&gt;在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。&lt;/p&gt;
&lt;p&gt;一般遵守 </summary>
      
    
    
    
    <category term="技术开发" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Git" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统入门操作导图</title>
    <link href="http://example.com/wiki/xitongruemn/"/>
    <id>http://example.com/wiki/xitongruemn/</id>
    <published>2025-06-07T11:06:16.000Z</published>
    <updated>2025-06-07T11:09:46.459Z</updated>
    
    <content type="html"><![CDATA[<p>本导图适合刚接触电脑，刚开始使用 Windows 系统，以后可能会经常使用电脑做<strong>技术</strong>工作，但目前<strong>零基础的新手</strong>，作为入门引导。</p><p>目的为改善现有不良使用习惯，规范一些操作行为，了解一些操作背后的原理，避免安装病毒和流氓软件，简单提高电脑使用效率。</p><p>整个导图分为 <strong>「1-文件、2-文件系统、3-命令行界面、4-搜索引擎使用、5-软件下载安装、6-常用系统工具」</strong> ，共六个大点，请依次阅读学习；整个<strong>主线</strong>以第五点<strong>软件下载安装</strong>为中心，将前四点内容依次串联起来，形成结构化知识。</p><p>导图类似于大纲框架，每点的分支<strong>只具体到内容要点</strong>，每个要点需要根据讲解或者查阅详细资料深入其内容。</p><p><img src="/images/caozuo.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本导图适合刚接触电脑，刚开始使用 Windows 系统，以后可能会经常使用电脑做&lt;strong&gt;技术&lt;/strong&gt;工作，但目前&lt;strong&gt;零基础的新手&lt;/strong&gt;，作为入门引导。&lt;/p&gt;
&lt;p&gt;目的为改善现有不良使用习惯，规范一些操作行为，了解一些操作背后的原</summary>
      
    
    
    
    <category term="计算机基础知识" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>平面设计入门导图</title>
    <link href="http://example.com/wiki/yishusheji/"/>
    <id>http://example.com/wiki/yishusheji/</id>
    <published>2025-06-07T10:55:58.000Z</published>
    <updated>2025-06-07T11:00:26.710Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/yishu.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/yishu.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="艺术" scheme="http://example.com/categories/%E8%89%BA%E6%9C%AF/"/>
    
    <category term="平面设计" scheme="http://example.com/categories/%E8%89%BA%E6%9C%AF/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="平面设计" scheme="http://example.com/tags/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>字符集与字符编码</title>
    <link href="http://example.com/wiki/zifujiyuzifubianma/"/>
    <id>http://example.com/wiki/zifujiyuzifubianma/</id>
    <published>2025-06-07T09:32:45.000Z</published>
    <updated>2025-06-07T10:04:42.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符集-Charset"><a href="#字符集-Charset" class="headerlink" title="字符集 (Charset)"></a>字符集 (Charset)</h1><blockquote><p>是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。  </p></blockquote><p>简单的说字符集相当于一种映射关系，一个种类的集合中，把每个字符分配一个唯一的、一一对应的编号。  </p><p>举个例子比如：  </p><table><thead><tr><th>编号</th><th>编号表示字符</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>…</td><td>…</td></tr><tr><td>26</td><td>Z</td></tr><tr><td>27</td><td>[</td></tr><tr><td>28</td><td>\</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>像例子中这样，一组映射想要表示的字符与其编号的集合就叫字符集。  </p><p>不同的字符集有不同的映射，比如 <code>ASCII 字符集</code> 的映射中， 映射 <code>A-Z </code>的编号就是 <code>65-90</code>，与上面例子中的编号就不一样，这就是两个不兼容的字符集。</p><h1 id="字符编码-Character-Encoding"><a href="#字符编码-Character-Encoding" class="headerlink" title="字符编码 (Character Encoding)"></a>字符编码 (Character Encoding)</h1><p>在上面过程中，我们已经给每个字符都分配了一个唯一的编号，但是我们要怎么把打出来的一段文字存到文件中去呢？你可能会觉得奇怪，这还不简单，计算机是存储的二进制文件，我们把文字中每一个字符编号数字对应的十六进制保存为一个字节，按照字节把文字中的所有字符编号依次写入到文件中不就完了么？</p><p>额，这就会出问题了。上面我们是以 ASCII 字符集来举例的，ASCII 字符集将字母、数字和其它符号编号，并用 8 比特的二进制来表示这个整数；因为每个字符都只有一个字节，所以看起来好像没什么问题；那我们再来考虑下其他的一些字符集。</p><p>比如说中文的 GBK 字符集中部分：</p><table><thead><tr><th>编号</th><th>编号表示字符</th></tr></thead><tbody><tr><td>45217</td><td>啊</td></tr><tr><td>45218</td><td>阿</td></tr><tr><td>45219</td><td>埃</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>这些编号超过 255 的字符，显然不能用一个字节来表示了，最少也要两个字符。再来按照上面的说法，把它们编号对应的十六进制依次写进文件中，假如这段文本中既有中文又有英文，那问题来了：</p><p>我们在读取文件的时候，读到了 4 个字节，那它究竟是表示两个汉字，还是四个英文字母，还是一个汉字两个字母呢？</p><p>看吧，不加限制的直接保存编号会产生一定的歧义。为了消除这种歧义，方便计算机能够简单的识别和存储字符，我们引入一种编码规则，比如所有字符编号对应的十六进制均按两字节存储，不够两字节的编号在前面添加如 <code>0x00</code> 来补齐两字节。这样就解决了上面的歧义问题，所有字符都储存为两字节，每次读取两字节来表示一个字符，包括英文也是；这就是一种典型的双字节定长编码。</p><p>嗯，歧义的问题是解决了，但是又有新的问题，上面我们是说至少要两个字节的字符集，要是哪天我们遇到一个要四个字节才能表示字符的字符集，那就得使用四字节定长编码，这里就存在巨大的浪费。我们这个字符集中前十分之一编号的常用字符时，本来只需要一个字节来表示的字符，现在统统使用四个字节，一篇文章的体积无形中变大了三倍，这就极大的浪费了存储空间。</p><p>于是人们就在想，能不能让原来只需要一个字节表示的字符编号，现在还是用一个字节来储存，原来只需要两个字节表示的字符编号，还是用两个字节来储存，依次类推，都只用其能表示的最小编码长度呢？</p><p>答案是有的，于是有了变长字符编码。</p><p>上面字符集处我们讲到过，每个字符有唯一的、一一对应的编号，在编码后也应如此。这就要求<strong>每个字符有唯一编码，每个码字是唯一可译的</strong>。  </p><p>《信息论》中指出，只有<strong>前缀码</strong>是唯一可译的。如果一个码的任何一个码字都不是其他码字的前缀，则称该码为<strong>异前缀码（前缀码）</strong>。前缀码的充要条件是满足<strong>克拉夫特不等式（Kraft Inequality）</strong>，即：  </p><p>$$<br>\sum_{i&#x3D;1}^{n} m^{-k_i} \leq 1, \quad (m \text{ 为码元数，} k_i \text{ 指第 } i \text{ 个码元长度})<br>$$  </p><p>我们来看一个常见的变长编码（UTF-8）的部分（前三字节）：  </p><table><thead><tr><th>Byte0</th><th>Byte1</th><th>Byte2</th></tr></thead><tbody><tr><td>0xxxxxxx</td><td></td><td></td></tr><tr><td>110xxxxx</td><td>10xxxxxx</td><td></td></tr><tr><td>1110xxxx</td><td>10xxxxxx</td><td>10xxxxxx</td></tr></tbody></table><h3 id="UTF-8-编码规则解析"><a href="#UTF-8-编码规则解析" class="headerlink" title="UTF-8 编码规则解析"></a>UTF-8 编码规则解析</h3><p>在 ASCII 码的范围，用一个字节表示，超出 ASCII 码的范围就用多字节表示，这就形成了我们上面看到的 UTF-8 的表示方法，这样的好处是当 Unicode 文件中只有 ASCII 码时，存储的文件都为一个字节，所以就是普通的 ASCII 文件无异，读取的时候也是如此，所以能与以前的 ASCII 文件兼容。  </p><p>大于 ASCII 码的，就会由上面的第一字节的前几位表示该 Unicode 字符的长度，比如：  </p><ul><li><code>110xxxxx</code>：前三位的二进制表示告诉我们这是个 <strong>2Bytes</strong> 的 Unicode 字符；  </li><li><code>1110xxxx</code>：是个三位的 Unicode 字符，依此类推；  </li><li><code>xxx</code> 的位置由字符编码数的二进制表示的位填入，越靠右的 <code>x</code> 具有越少的特殊意义。只用最短的那个足够表达一个字符编码数的多字节串。注意在多字节串中，第一个字节的开头 <code>1</code> 的数目就是整个串中字节的数目。</li></ul><h3 id="Unicode-与-UTF-8-的关系"><a href="#Unicode-与-UTF-8-的关系" class="headerlink" title="Unicode 与 UTF-8 的关系"></a>Unicode 与 UTF-8 的关系</h3><p>上面提到的 <strong>Unicode</strong> 就是一种伟大的编码方案标准！Unicode 是计算机科学领域里的一项业界标准，它为让计算机方便的使用统一而兼容的编码表达任意语言的任意字符、用以取代现有的字符编码而设计，也被称为“万国码、统一码”。Unicode 标准涵盖的内容很宽，除了视觉上的字形、编码方法、标准的字符编码外，还包含了字符特性，如大小写字母。  </p><p>我们常说的 Unicode 指的是 <strong>Unicode 字符集</strong>，是将世界上大部分国家的文字做了整理、编排，不断发展更新的多个文字种类平面的编号集合；Unicode 字符集的编码有多种，其实现方式都称为 <strong>Unicode 转换格式（Unicode Transformation Format，简称为 UTF）</strong>。  </p><p>而 <strong>UTF-8</strong> 就是只 Unicode 字符集实现中的一种<strong>字符编码方式</strong>。  </p><h1 id="字符集与字符编码的混称"><a href="#字符集与字符编码的混称" class="headerlink" title="字符集与字符编码的混称"></a>字符集与字符编码的混称</h1><p>总的来说，简单的理解，<strong>字符编码</strong>就是字符集这种映射编号具体到计算机处理时，所用编码规则的实现方式。  </p><p>比如 Unicode 字符集的字符编码方式就有 UTF-8、UTF-16、UTF-32 等。  </p><p>但是也有很多我们常说的字符编码标准中，即包含了字符集也包含了字符编码，比如比如 <code>ASCII 字符集</code> 和 <code>ASCII 字符编码</code>，<code>GB2312 字符集 </code>和 <code>GB2312 字符编码</code>，<code>GBK 字符集</code> 和 <code>GBK 字符编码 </code>等；</p><p>于是人们也常把它们混称，将字符集和字符编码都用标准方案的名称来统称，比如 <code>ASCII 编码</code>、 <code>GBK 编码</code>、<code>GB2312 编码</code>。但是我们在谈论的时候，应该自己根据话语环境分辨其具体指代意思而不至出现歧义。 </p><h1 id="现代编码模型"><a href="#现代编码模型" class="headerlink" title="现代编码模型"></a>现代编码模型</h1><p>在 Unicode 技术报告 Unicode Technical Report (UTR) 中，将现代编码模型分为五个层次：  </p><h3 id="1-抽象字符表（Abstract-character-repertoire）"><a href="#1-抽象字符表（Abstract-character-repertoire）" class="headerlink" title="1. 抽象字符表（Abstract character repertoire）"></a>1. 抽象字符表（Abstract character repertoire）</h3><p>是一个系统支持的所有抽象字符的集合。字符表反映了如何将书写系统分解成线性信息单元。例如拉丁、希腊字母表分为字母、数字、标点这样的一些字符，它们都能按照一种简单的线性序列排列，字符表包括预先编号的字母和符号的组合。  </p><h3 id="2-编码字符集（CCS-Coded-Character-Set）"><a href="#2-编码字符集（CCS-Coded-Character-Set）" class="headerlink" title="2. 编码字符集（CCS: Coded Character Set）"></a>2. 编码字符集（CCS: Coded Character Set）</h3><p>是将字符集 ( C ) 中每个字符映射到一个坐标（整数值对：( x, y )）或者表示为一个非负整数 ( N ) 。字符集及码位的映射称为编码字符集。多个编码字符集可以表示同样的字符表，由此产生了<strong>编码空间（encoding space）</strong> 的概念：简单说就是包含所有字符的表的维度。编码空间还可以用其子集来表述，如行、列、面（plane）等。编码空间中的一个位置（position）称为 <strong>码位（code point）</strong> 。一个字符所占用的码位称为 <strong>码位值（code point value）</strong> 。编码字符集就是把抽象字符映射为码位值。  </p><h3 id="3-字符编码表（CEF-Character-Encoding-Form）"><a href="#3-字符编码表（CEF-Character-Encoding-Form）" class="headerlink" title="3. 字符编码表（CEF: Character Encoding Form）"></a>3. 字符编码表（CEF: Character Encoding Form）</h3><p>也称为 <code>storage format </code>，是将编码字符集的非负整数值（即抽象的码位）转换成有限比特长度的整型值（称为 <strong>码元（code units）</strong> ）的序列。对于定长编码来说是个到自身的映射（mapping），但对于变长编码来说，该映射比较复杂，即把一些码位映射到一个码元，把另外一些码位映射到由多个码元组成的序列。  </p><h3 id="4-字符编码方案（CES-Character-Encoding-Scheme）"><a href="#4-字符编码方案（CES-Character-Encoding-Scheme）" class="headerlink" title="4. 字符编码方案（CES: Character Encoding Scheme）"></a>4. 字符编码方案（CES: Character Encoding Scheme）</h3><p>也称作 <code>serialization format</code> 。将定长的整型值（即码元）映射到 8 位字节序列，以便编码后的数据的文件存储或网络传输。例如在使用 Unicode 的场合，使用一个简单的字符来指定字节顺序是大端序或者小端序（UTF-16BE, UTF-16LE）。  </p><h3 id="5-传输编码语法（transfer-encoding-syntax）"><a href="#5-传输编码语法（transfer-encoding-syntax）" class="headerlink" title="5. 传输编码语法（transfer encoding syntax）"></a>5. 传输编码语法（transfer encoding syntax）</h3><p>用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：  一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如 Base64；二是压缩字节序列的值，如 LZW 或者进程长度编码等无损压缩技术。  </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">Character encoding | Wikipedia</a></li><li><a href="">Unicode | Wikipedia</a></li><li><a href="">字符集和字符编码 | 吴秦</a></li><li><a href="">计算机系统是如何显示一个字符的？ - 知乎</a></li><li><a href="">Windows 记事本的 ANSI、Unicode、UTF-8 这三种编码模式有什么区别？ - 知乎 | 梁海的回答</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符集-Charset&quot;&gt;&lt;a href=&quot;#字符集-Charset&quot; class=&quot;headerlink&quot; title=&quot;字符集 (Charset)&quot;&gt;&lt;/a&gt;字符集 (Charset)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;是一个系统支持的所有抽象字符的集合</summary>
      
    
    
    
    <category term="计算机基础知识" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>马斯洛需求层次理论</title>
    <link href="http://example.com/wiki/masiluo/"/>
    <id>http://example.com/wiki/masiluo/</id>
    <published>2025-06-07T09:04:24.000Z</published>
    <updated>2025-06-07T09:19:10.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>亚伯拉罕·马斯洛(Abraham Harold Maslow, 1908-1970)，人本主义心理学（Humanistic Psychology）的主要创建者之一。</p><p>马斯洛在 1943 年发表的《人类动机的理论》（ A Theory of Human Motivation Psychological Review）与 1954 年发表的《动机与人格》（Motivation and personality）书中提出了以下五层（又或称七层）需求层次理论。各层需求之间不但有高低之分，而且有前后顺序之别；只有低一层需求获得满足之后，高一层的需求才会产生。需求分为两大类，较低的前三层称为基本需求（basic needs），较高的后两层称为成长需求（growth needs）。基本需求有一共同性质，为均系由于生理上或心理上有某些欠缺而产生，故而又称匮乏性需求（deficiency needs）。</p><h1 id="五大需求层次"><a href="#五大需求层次" class="headerlink" title="五大需求层次"></a>五大需求层次</h1><h2 id="生理需求"><a href="#生理需求" class="headerlink" title="生理需求"></a>生理需求</h2><p>这是人类维持自身生存的最基本要求，包括饥、渴、衣、住、行的方面的要求。如果这些需要得不到满足，人类的生存就成了问题。在这个意义上说，生理需要是推动人们行动的最强大的动力。马斯洛认为，只有这些最基本的需要满足到维持生存所必需的程度后，其他的需要才能成为新的激励因素，而到了此时，这些已相对满足的需要也就不再成为激励因素了。</p><h2 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h2><p>这是人类要求保障自身安全、摆脱事业和丧失财产威胁、避免病害的侵袭、接触严酷的监督等方面的需要。马斯洛认为，整个有机体是一个追求安全的机制，人的感受器官、效应器官、智能和其他能量主要是寻求安全的工具，甚至可以把科学和人生观都看成是满足安全需要的一部分。</p><h2 id="感情需求"><a href="#感情需求" class="headerlink" title="感情需求"></a>感情需求</h2><p>这一层次的需要包括两个方面的内容。一是友爱的需要，即人人都需要伙伴之间、同事之间的关系融洽或保持友谊和忠诚；人人都希望得到爱情，希望爱别人，也渴望接受别人的爱。二是归属的需要，即人都有一种归属于一个群体的感情，希望成为群体中的一员，并相互关心和照顾。感情上的需要比生理上的需要来的细致，它和一个人的生理特性、经历、教育、宗教信仰都有关系。</p><h2 id="尊重需求"><a href="#尊重需求" class="headerlink" title="尊重需求"></a>尊重需求</h2><p>人人都希望自己有稳定的社会地位，要求个人的能力和成就得到社会的承认。尊重的需要又可分为内部尊重和外部尊重。内部尊重是指一个人希望在各种不同情境中有实力、能胜任、充满信心、能独立自主。外部尊重是指一个人希望有地位、有威信，受到别人的尊重、信赖和高度评价。马斯洛认为，尊重需要得到满足，能使人对自己充满信心，对社会满腔热情，体验到自己活着的用处和价值。</p><h2 id="自我实现需求"><a href="#自我实现需求" class="headerlink" title="自我实现需求"></a>自我实现需求</h2><p>这是最高层次的需要，它是指实现个人理想、抱负，发挥个人的能力到最大程度，完成与自己的能力相称的一切事情的需要。也就是说，人必须干称职的工作，这样才会使他们感到最大的愉悦。自我实现的需要是在努力实现自己的潜力，使自己越来越成为自己所期望的人物。根据马斯洛的需求层次论，个人人格获得充分发展的理想境界是自我实现，自我实现（self actualization）就是人性本质的终极目的，也就是个人潜力得到了充分发展。</p><p>我倾向于使用马斯洛需求层次来解释或分析一些行为，例如，买不买奢侈品？</p><p>所谓奢侈品即是超出人们生存发展与需要范围的消费品，通常买的人是希望通过奢侈品的独特性和稀缺性来表示自己或希望他人认同自身独特的身份和社会地位。</p><p>根据以上特点我认为奢侈品是属于尊重需求及以上的层次，对于没有工作的学生或者刚找到工作仅能凑合糊口的人来说，生理需求和安全需求刚刚满足或没有满足，不应该过分往高层次需求上勉强，这部分人通常也不是奢侈品的买主。但是对于年收入过百万的白领老总等一类人来说，两三千的包，三四千的表可能都不算什么奢侈品，甚至沦落到必要消费品里面，毕竟没个两三千的表根本不好意思拿出手吧。</p><p>这两者的差别，用马斯洛需求层次来解释大概是处于不同层次间的人主要追求目的的不同表现。什么层次的人都应该使用符合自己层次的东西，假如处在基本需求层的人突然追求超越了本层需求的东西，除了一些特殊情况，一般来说都可能是错误选择，也会闹出一些笑话：</p><p>(以下出自知乎答主 <a href="https://www.zhihu.com/question/29253451/answer/43822556" target="_blank">明月心的回答</a > )</p><p>以我在这个土豪城市的观察来看，如果你住豪宅，开的车价格超过100万，你随意拎个高仿的包、玻璃石头的戒指，朋友同事都不会怀疑那是假的，你随意淘宝一件衣服别人都会问是哪个名牌。</p><p>反之，你开辆10万左右的家用小轿车再戴个10万的钻戒，你知道别人怎么想吗？——</p><p>“那谁的钻戒假的吧？一看她家条件也就一般，应该买不起真的。”</p><p>“如果是真的才搞笑了，缺心眼呢吧……”</p><p>人们往往更愿意从大件商品来判断一个人的家境或经济能力，无论是对他们身边熟悉的人还是一个刚刚接触到的人。拎真LV挤公交的mm，如果想用一两个包就获得周围人对她“白富美”的定义，从而满足虚荣心，是注定要失望的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">马斯洛人类需求五层次理论(Maslow’s Hierarchy of Needs)</a></li><li><a href="">亚伯拉罕·马斯洛</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;亚伯拉罕·马斯洛(Abraham Harold Maslow, 1908-1970)，人本主义心理学（Humanistic Psycholo</summary>
      
    
    
    
    <category term="生活学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习生活" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>点滴人生观念信条</title>
    <link href="http://example.com/wiki/renshengxintiao/"/>
    <id>http://example.com/wiki/renshengxintiao/</id>
    <published>2025-06-07T08:45:15.000Z</published>
    <updated>2025-06-07T08:52:08.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习生活观念，提高生活质量，拒绝直男癌"><a href="#学习生活观念，提高生活质量，拒绝直男癌" class="headerlink" title="学习生活观念，提高生活质量，拒绝直男癌"></a>学习生活观念，提高生活质量，拒绝直男癌</h1><p>优胜劣汰，直男癌去死。</p><h1 id="消费观念：什么层次的人用什么层次的货"><a href="#消费观念：什么层次的人用什么层次的货" class="headerlink" title="消费观念：什么层次的人用什么层次的货"></a>消费观念：什么层次的人用什么层次的货</h1><p>不要越界追求高端，并不能达到炫耀的目的；也不要刻意低廉、过分节俭，一味去省钱，反而失去更多。</p><p>钱是赚出来的，不是省出来的，赚出来的的钱 “是为了实现一定目标的等价物”。</p><p>参见 &gt; - <a href="">马斯洛需求层次理论 、曹将 | 从他们分手说起。</a></p><h1 id="抱目的做事而不是抱期望做事"><a href="#抱目的做事而不是抱期望做事" class="headerlink" title="抱目的做事而不是抱期望做事"></a>抱目的做事而不是抱期望做事</h1><p>不要报期望。</p><p>任何期望都有实现的可能，但也有落空后的失望，意志不坚的人容易被失望左右，最好是不要抱着任何好的坏的期望，而是抱着某种目的做事，想着要达成目的应该要做什么，通过目的驱动行为，通过目的驱动解决问题。</p><h1 id="遇到问题、事件努力解决"><a href="#遇到问题、事件努力解决" class="headerlink" title="遇到问题、事件努力解决"></a>遇到问题、事件努力解决</h1><p>不要想着不劳而获，也不要想着该别人做，他不做我去做就吃亏。</p><p>如果于自身利益相关，应该自我主动推动事情发展、解决问题，而不是别人不做我也不做，不要吝啬一丝力气。</p><h1 id="遭遇灾难不要放弃，人活着就有希望"><a href="#遭遇灾难不要放弃，人活着就有希望" class="headerlink" title="遭遇灾难不要放弃，人活着就有希望"></a>遭遇灾难不要放弃，人活着就有希望</h1><p>不到最后已经结束就不要放弃。</p><p>人生和生活都是需要活着才能实现，记录人生信条就是因为认为这些信条能帮助人活的更好。</p><h1 id="考虑最坏的打算，提前做好危机准备"><a href="#考虑最坏的打算，提前做好危机准备" class="headerlink" title="考虑最坏的打算，提前做好危机准备"></a>考虑最坏的打算，提前做好危机准备</h1><p>防人之心不可无，但不等于被害妄想症。保护自己是必要的，人不能有恃无恐。</p><p>待人和气从哪个方便来说对人对己都有好处，但是和气不等于软弱退让，而是占理但不逼迫强硬。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">马斯洛需求层次理论</a></li><li><a href="">曹将 | 从他们分手说起</a></li><li><a href="">雷斯林 | “我可以骚，你不能扰”是最没意义的口号</a></li><li><a href="">雷斯林 | 法律对不怕死的人无解，所以待人和气一点其实对自己也有好处 | 微信</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习生活观念，提高生活质量，拒绝直男癌&quot;&gt;&lt;a href=&quot;#学习生活观念，提高生活质量，拒绝直男癌&quot; class=&quot;headerlink&quot; title=&quot;学习生活观念，提高生活质量，拒绝直男癌&quot;&gt;&lt;/a&gt;学习生活观念，提高生活质量，拒绝直男癌&lt;/h1&gt;&lt;p&gt;优胜</summary>
      
    
    
    
    <category term="生活学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="观念信条" scheme="http://example.com/tags/%E8%A7%82%E5%BF%B5%E4%BF%A1%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java 访问控制符</title>
    <link href="http://example.com/wiki/Java/"/>
    <id>http://example.com/wiki/Java/</id>
    <published>2025-06-07T08:36:36.000Z</published>
    <updated>2025-06-07T10:29:55.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-访问控制符"><a href="#Java-访问控制符" class="headerlink" title="Java 访问控制符"></a>Java 访问控制符</h1><h2 id="访问控制符与访问控制级别"><a href="#访问控制符与访问控制级别" class="headerlink" title="访问控制符与访问控制级别"></a>访问控制符与访问控制级别</h2><p>Java 提供了 3 个访问控制符：<code>private</code>、<code>protected</code> 和 <code>public</code>，分别代表了 3 个访问控制级别，另外还有一个不加任何访问控制符的默认访问控制级别（friendly，也称 default），也就是共 4 个访问控制级别。  </p><p>Java 的访问控制级别由大到小为： </p><p>public –&gt; protected –&gt; friendly –&gt; private</p><h2 id="访问控制表"><a href="#访问控制表" class="headerlink" title="访问控制表"></a>访问控制表</h2><p>小结一下其控制可访问作用域  </p><table><thead><tr><th align="center">控制级别与作用域</th><th align="center">同一类中</th><th align="center">同一包中</th><th align="center">子类中</th><th align="center">外部包&#x2F;任意类</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center"><code>protected</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center"><code>friendly</code></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>private</code></td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-访问控制符&quot;&gt;&lt;a href=&quot;#Java-访问控制符&quot; class=&quot;headerlink&quot; title=&quot;Java 访问控制符&quot;&gt;&lt;/a&gt;Java 访问控制符&lt;/h1&gt;&lt;h2 id=&quot;访问控制符与访问控制级别&quot;&gt;&lt;a href=&quot;#访问控制符与访问控</summary>
      
    
    
    
    <category term="程序语言" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CSS 属性声明顺序规范</title>
    <link href="http://example.com/wiki/CSS/"/>
    <id>http://example.com/wiki/CSS/</id>
    <published>2025-06-07T08:22:33.000Z</published>
    <updated>2025-06-07T09:02:36.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-属性声明顺序规范"><a href="#CSS-属性声明顺序规范" class="headerlink" title="CSS 属性声明顺序规范"></a>CSS 属性声明顺序规范</h1><p>很多 CSS 规范的属性顺序都各不一样，这东西也不像 Vue 组件属性顺序一样有官方规范，这里记录下我目前认为合适的一种顺序。</p><h2 id="属性分类顺序"><a href="#属性分类顺序" class="headerlink" title="属性分类顺序"></a>属性分类顺序</h2><ul><li>显示方法 &amp; 布局  </li><li>定位  </li><li>盒模型框  <ul><li>外边距  </li><li>边框  </li><li>内边距</li></ul></li><li>尺寸  </li><li>文本样式  <ul><li>字体  </li><li>文本  </li><li>文字颜色</li></ul></li><li>背景  </li><li>轮廓  </li><li>透明度 &amp; 阴影  </li><li>动效  <ul><li>过渡  </li><li>转换变形  </li><li>动画</li></ul></li><li>其他  <ul><li>伪类 &amp; 伪元素  </li><li>引用  </li><li>媒体查询</li></ul></li></ul><h2 id="属性顺序列表"><a href="#属性顺序列表" class="headerlink" title="属性顺序列表"></a>属性顺序列表</h2><blockquote><ul><li><a href="https://alloyteam.github.io/CodeGuide/#css-declaration-order">源自 AlloyTeam CSS Code Guide</a></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;display&quot;</span>,</span><br><span class="line">    <span class="string">&quot;visibility&quot;</span>,</span><br><span class="line">    <span class="string">&quot;float&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow-x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow-y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zoom&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;table-layout&quot;</span>,</span><br><span class="line">    <span class="string">&quot;empty-cells&quot;</span>,</span><br><span class="line">    <span class="string">&quot;caption-side&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-spacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-collapse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list-style-position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list-style-type&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list-style-image&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;z-index&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;margin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin-top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin-right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin-bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin-left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;box-sizing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-right-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-right-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-right-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-left-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-left-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-left-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top-left-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-top-right-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom-right-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-bottom-left-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image-source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image-slice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image-outset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-image-repeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding-top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding-right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding-bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding-left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;min-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;max-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;min-height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;max-height&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;font&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-family&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-size&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-weight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-variant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-size-adjust&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-stretch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-effect&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-emphasize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-emphasize-position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-emphasize-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-smooth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;line-height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-align&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-align-last&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vertical-align&quot;</span>,</span><br><span class="line">    <span class="string">&quot;white-space&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-decoration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-emphasis&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-emphasis-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-emphasis-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-emphasis-position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-indent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-justify&quot;</span>,</span><br><span class="line">    <span class="string">&quot;letter-spacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;word-spacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-outline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-transform&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-wrap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-overflow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-overflow-ellipsis&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-overflow-mode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;word-wrap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;word-break&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-image&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-repeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-attachment&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-position-x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-position-y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-clip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-size&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;outline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outline-width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outline-style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outline-color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outline-offset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;opacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;box-shadow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-shadow&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;transition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transition-delay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transition-timing-function&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transition-duration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transition-property&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transform&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transform-origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-duration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-play-state&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-timing-function&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-delay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-iteration-count&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation-direction&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    <span class="string">&quot;quotes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;counter-reset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;counter-increment&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user-select&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav-index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav-up&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav-right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav-down&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav-left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tab-size&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hyphens&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pointer-events&quot;</span></span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://codeguide.co/#css-declaration-order">Code Guide by @mdo</a></li><li><a href="https://github.com/twitter/recess/blob/master/lib/lint/strict-property-order.js#L36">RECESS | property order</a></li><li><a href="https://alloyteam.github.io/CodeGuide/#css-declaration-order">Code Guide by @AlloyTeam</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-属性声明顺序规范&quot;&gt;&lt;a href=&quot;#CSS-属性声明顺序规范&quot; class=&quot;headerlink&quot; title=&quot;CSS 属性声明顺序规范&quot;&gt;&lt;/a&gt;CSS 属性声明顺序规范&lt;/h1&gt;&lt;p&gt;很多 CSS 规范的属性顺序都各不一样，这东西也不像 Vue</summary>
      
    
    
    
    <category term="程序语言" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ZMTtt&#39;s Wiki 介绍</title>
    <link href="http://example.com/wiki/my-first-post/"/>
    <id>http://example.com/wiki/my-first-post/</id>
    <published>2025-06-05T17:13:01.000Z</published>
    <updated>2025-06-07T11:01:53.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZMTtt’s-Wiki"><a href="#ZMTtt’s-Wiki" class="headerlink" title="ZMTtt’s Wiki"></a>ZMTtt’s Wiki</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a><a name="categories"></a >分类</h2><ul><li>技术开发</li><li>生活学习</li><li>程序语言</li><li>艺术</li><li>计算机基础知识</li></ul><h2 id="欢迎来到-ZMTtt’s-Wiki-站点"><a href="#欢迎来到-ZMTtt’s-Wiki-站点" class="headerlink" title="欢迎来到 ZMTtt’s Wiki 站点"></a>欢迎来到 ZMTtt’s Wiki 站点</h2><p>2025年6月6日</p><h3 id="知识管理理念"><a href="#知识管理理念" class="headerlink" title="知识管理理念"></a>知识管理理念</h3><p>这是 赵鸣滔 的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。 </p><p>我一直觉得 知识不能碎片化，要结构化 ，于是希望寻找一种优雅的方式来管理我的知识。先后了解或尝试过 OneNote、Evernote、Blog、Wiki 等方式，总结了一套觉得比较合理的知识获取吸收管理流程：</p><ol><li>通过网页、RSS、微信等网络渠道作为知识获取来源。</li><li>通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息， 收藏 信息， 分类整理 ，做读后 要点 笔记记录。</li><li>自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用  Wiki  记录。</li><li>最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在  博客  上。</li></ol><p>在使用中， 笔记系统  主大块信息的 分类和整理 ， Wiki  主零碎知识的 积累 ，而  博客  只在于  精 。Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是 通过积累，把原本大量碎片化的知识结构化整理起来了 。</p><h3 id="博客与-Wiki-的区别"><a href="#博客与-Wiki-的区别" class="headerlink" title="博客与 Wiki 的区别"></a>博客与 Wiki 的区别</h3><p>博客的目的是  分享和展示 ，分享自己的知识，展示自己的水平，需要放拿得出手的东西，因此不适合放碎片化的只言片语，更适合放  一个系列  的总结或者教程等，是一个十分成体系的知识平台。</p><h3 id="Wiki-系统选择历程"><a href="#Wiki-系统选择历程" class="headerlink" title="Wiki 系统选择历程"></a>Wiki 系统选择历程</h3><p>当我尝试部署一个自己的 Wiki 系统时，又开始纠结于选择哪个 Wiki 系统。参考网上博客，实际部署和对比比较了几个时下流行的 Wiki 系统：MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten 等等。都不如人意，有些是部署麻烦复杂，有些是界面太丑，有些不能分级，有些分级不能展开，有些不能搜索，还有的甚至不是用的 Markdown 。</p><p>根据这些不算满意的使用体验，我总结整理了一下自己对于  个人 Wiki  的一些需求：</p><ul><li>界面简洁美观，排版字体友好</li><li>支持多级分类</li><li>方便修改和更新内容</li><li>部署简单</li><li>分类目录可展开和收缩</li><li>展开分类时可查看该分类下所有文章 &#x2F; 词条的标题</li><li>每篇文章 &#x2F; 词条能添加多个分类 &#x2F; 标签</li><li>Wiki 可支持引用内部链接</li><li>使用 Markdown 书写文章 &#x2F; 词条</li><li>支持全文搜索（可搜索内容和标题）</li></ul><p>在之前的使用中，Wikiteen 是最接近我需求的，但是仍然有一些条件不满足，比如部署和搜索。但是我个人比较喜欢 Wikitten 的样式。于是最终我选择了仿照 Wikitten 的样式自己写这个基于 Hexo 的 Wiki 主题 hexo-theme-Wikitten，作为自己用的一套 Wiki 系统，基本实现了上述的需求。现在暂时自己用着，当然这个初步功能还很简单，后续也有一堆 Bug 和 TODO List 需要维护，欢迎有兴趣的提提 PR。</p><h2 id="页脚信息"><a href="#页脚信息" class="headerlink" title="页脚信息"></a>页脚信息</h2><p>Newer<br>Linux 命令控制屏幕<br>Powered by Hexo. Theme - wikitten </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ZMTtt’s-Wiki&quot;&gt;&lt;a href=&quot;#ZMTtt’s-Wiki&quot; class=&quot;headerlink&quot; title=&quot;ZMTtt’s Wiki&quot;&gt;&lt;/a&gt;ZMTtt’s Wiki&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Wiki" scheme="http://example.com/tags/Wiki/"/>
    
    <category term="知识管理" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
